
running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 26 tests
test tests::drop_unowned ... ok
test tests::eval_assign_move ... ok
test tests::drop_owned ... ok
test tests::eval_block ... ok
test tests::eval_assign_copy ... ok
test tests::eval_assign_move_deref ... ok
test tests::drop_larger_example ... ok
test tests::eval_block_ref ... ok
test tests::eval_block_mut_ref ... ok
test tests::eval_assign_replace ... ok
test tests::eval_box ... ok
test tests::eval_box_box ... ok
test tests::eval_copy ... ok
test tests::eval_expr_stmt ... ok
test tests::eval_let_mut ... ok
test tests::eval_lits ... ok
test tests::eval_move ... ok
test tests::locate_var ... ok
test tests::locate_ref ... ok
test tests::locate_panic - should panic ... ok
test tests::read_ref_owned ... ok
test tests::read_panic - should panic ... ok
test tests::read_var ... ok
test tests::write_deref_read_diff ... ok
test tests::write_panic - should panic ... ok
test tests::write_two_deref ... ok

successes:

---- tests::drop_unowned stdout ----
store after insert(l_x → <l_1 ○> '0): {
    l_x → <l_1 ○> '0
}
store after insert(l_1 → <1> '0): {
    l_x → <l_1 ○> '0
    l_1 → <1> '0
}
store after insert(l_1 → <1> '0): {
    l_1 → <1> '0
}
store after drop([l_x ●]): {
    l_1 → <1> '0
}

---- tests::eval_assign_move stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluating stmt: let mut y = Box::new(15) (R-Declare)
'4   evaluating expr: Box::new(15) (R-Box)
'4   evaluating expr: 15 (R-Int)
'4   evaluated expr 15 ⇓ 15
store after insert(l_2 → <15> '0): {
    l_2 → <15> '0
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluated expr Box::new(15) ⇓ l_2 ●
store after insert(l_y → <l_2 ●> '4): {
    l_x → <l_1 ●> '4
    l_y → <l_2 ●> '4
    l_2 → <15> '0
    l_1 → <14> '0
}
'4   evaluating stmt: x = y (R-Assign)
'4   evaluating expr: y (R-Move)
store after write(y, ⊥): {
    l_x → <l_1 ●> '4
    l_y → <⊥> '4
    l_2 → <15> '0
    l_1 → <14> '0
}
'4   evaluated expr y ⇓ l_2 ●
store after drop([l_1 ●]): {
    l_x → <l_1 ●> '4
    l_y → <⊥> '4
    l_2 → <15> '0
}
store after write(x, l_2 ●): {
    l_x → <l_2 ●> '4
    l_y → <⊥> '4
    l_2 → <15> '0
}

---- tests::drop_owned stdout ----
store after insert(l_x → <l_1 ●> '0): {
    l_x → <l_1 ●> '0
}
store after insert(l_1 → <1> '0): {
    l_x → <l_1 ●> '0
    l_1 → <1> '0
}
store after drop([l_x ●]): {}

---- tests::eval_block stdout ----
'5   evaluating expr: {[..]; ε} '3 (R-Block)
'5   enter block '3

'3   evaluating stmt: let mut x = Box::new(23) (R-Declare)
'3   evaluating expr: Box::new(23) (R-Box)
'3   evaluating expr: 23 (R-Int)
'3   evaluated expr 23 ⇓ 23
store after insert(l_1 → <23> '0): {
    l_1 → <23> '0
}
'3   evaluated expr Box::new(23) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '3): {
    l_x → <l_1 ●> '3
    l_1 → <23> '0
}
'3   evaluating expr: ε (R-Unit)
'3   evaluated expr ε ⇓ ε
'3   exit block '3
store after drop([l_x ●]): {}

'5   evaluated expr {[..]; ε} '3 ⇓ ε

---- tests::eval_assign_copy stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_x → <l_1 ●> '4
    l_1 → <14> '0
}
'4   evaluating stmt: let mut y = Box::new(15) (R-Declare)
'4   evaluating expr: Box::new(15) (R-Box)
'4   evaluating expr: 15 (R-Int)
'4   evaluated expr 15 ⇓ 15
store after insert(l_2 → <15> '0): {
    l_x → <l_1 ●> '4
    l_2 → <15> '0
    l_1 → <14> '0
}
'4   evaluated expr Box::new(15) ⇓ l_2 ●
store after insert(l_y → <l_2 ●> '4): {
    l_x → <l_1 ●> '4
    l_2 → <15> '0
    l_1 → <14> '0
    l_y → <l_2 ●> '4
}
'4   evaluating stmt: x = y^ (R-Assign)
'4   evaluating expr: y^ (R-Copy)
'4   evaluated expr y^ ⇓ l_2 ●
store after drop([l_1 ●]): {
    l_x → <l_1 ●> '4
    l_2 → <15> '0
    l_y → <l_2 ●> '4
}
store after write(x, l_2 ●): {
    l_x → <l_2 ●> '4
    l_2 → <15> '0
    l_y → <l_2 ●> '4
}

---- tests::eval_assign_move_deref stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluating stmt: let mut y = Box::new(15) (R-Declare)
'4   evaluating expr: Box::new(15) (R-Box)
'4   evaluating expr: 15 (R-Int)
'4   evaluated expr 15 ⇓ 15
store after insert(l_2 → <15> '0): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
    l_2 → <15> '0
}
'4   evaluated expr Box::new(15) ⇓ l_2 ●
store after insert(l_y → <l_2 ●> '4): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
    l_2 → <15> '0
    l_y → <l_2 ●> '4
}
'4   evaluating stmt: *x = *y (R-Assign)
'4   evaluating expr: *y (R-Move)
store after write(*y, ⊥): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
    l_2 → <⊥> '0
    l_y → <l_2 ●> '4
}
'4   evaluated expr *y ⇓ 15
store after drop([14]): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
    l_2 → <⊥> '0
    l_y → <l_2 ●> '4
}
store after write(*x, 15): {
    l_1 → <15> '0
    l_x → <l_1 ●> '4
    l_2 → <⊥> '0
    l_y → <l_2 ●> '4
}

---- tests::drop_larger_example stdout ----
store after insert(l_x → <l_1 ●> '1): {
    l_x → <l_1 ●> '1
}
store after insert(l_1 → <l_2 ○> '2): {
    l_x → <l_1 ●> '1
    l_1 → <l_2 ○> '2
}
store after insert(l_2 → <1> '1): {
    l_2 → <1> '1
    l_x → <l_1 ●> '1
    l_1 → <l_2 ○> '2
}
store after insert(l_y → <l_x ○> '2): {
    l_x → <l_1 ●> '1
    l_2 → <1> '1
    l_y → <l_x ○> '2
    l_1 → <l_2 ○> '2
}
store after insert(l_z → <l_2 ●> '2): {
    l_z → <l_2 ●> '2
    l_x → <l_1 ●> '1
    l_2 → <1> '1
    l_y → <l_x ○> '2
    l_1 → <l_2 ○> '2
}
store after insert(l_w → <l_3 ●> '1): {
    l_z → <l_2 ●> '2
    l_w → <l_3 ●> '1
    l_x → <l_1 ●> '1
    l_2 → <1> '1
    l_y → <l_x ○> '2
    l_1 → <l_2 ○> '2
}
store after insert(l_3 → <2> '2): {
    l_z → <l_2 ●> '2
    l_w → <l_3 ●> '1
    l_x → <l_1 ●> '1
    l_2 → <1> '1
    l_y → <l_x ○> '2
    l_3 → <2> '2
    l_1 → <l_2 ○> '2
}
store after insert(l_v → <l_1 ○> '1): {
    l_x → <l_1 ●> '1
    l_y → <l_x ○> '2
    l_3 → <2> '2
    l_z → <l_2 ●> '2
    l_w → <l_3 ●> '1
    l_v → <l_1 ○> '1
    l_2 → <1> '1
    l_1 → <l_2 ○> '2
}
store after drop([l_x ●, l_w ●, l_v ●, l_2 ●]): {
    l_y → <l_x ○> '2
    l_z → <l_2 ●> '2
}
store after insert(l_y → <l_x ○> '2): {
    l_y → <l_x ○> '2
}
store after insert(l_z → <l_2 ●> '2): {
    l_y → <l_x ○> '2
    l_z → <l_2 ●> '2
}

---- tests::eval_block_ref stdout ----
'4   evaluating stmt: let mut x = Box::new(203) (R-Declare)
'4   evaluating expr: Box::new(203) (R-Box)
'4   evaluating expr: 203 (R-Int)
'4   evaluated expr 203 ⇓ 203
store after insert(l_1 → <203> '0): {
    l_1 → <203> '0
}
'4   evaluated expr Box::new(203) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_x → <l_1 ●> '4
    l_1 → <203> '0
}
'4   evaluating expr: {[..]; ε} '6 (R-Block)
'4   enter block '6

'6   evaluating stmt: let mut y = &*x (R-Declare)
'6   evaluating expr: &*x (R-Borrow)
'6   evaluated expr &*x ⇓ l_1 ○
store after insert(l_y → <l_1 ○> '6): {
    l_x → <l_1 ●> '4
    l_y → <l_1 ○> '6
    l_1 → <203> '0
}
'6   evaluating expr: ε (R-Unit)
'6   evaluated expr ε ⇓ ε
'6   exit block '6
store after drop([l_y ●]): {
    l_x → <l_1 ●> '4
    l_1 → <203> '0
}

'4   evaluated expr {[..]; ε} '6 ⇓ ε

---- tests::eval_block_mut_ref stdout ----
'4   evaluating stmt: let mut x = Box::new(203) (R-Declare)
'4   evaluating expr: Box::new(203) (R-Box)
'4   evaluating expr: 203 (R-Int)
'4   evaluated expr 203 ⇓ 203
store after insert(l_1 → <203> '0): {
    l_1 → <203> '0
}
'4   evaluated expr Box::new(203) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_1 → <203> '0
    l_x → <l_1 ●> '4
}
'4   evaluating expr: {[..]; ε} '6 (R-Block)
'4   enter block '6

'6   evaluating stmt: let mut y = &mut *x (R-Declare)
'6   evaluating expr: &mut *x (R-Borrow)
'6   evaluated expr &mut *x ⇓ l_1 ○
store after insert(l_y → <l_1 ○> '6): {
    l_1 → <203> '0
    l_x → <l_1 ●> '4
    l_y → <l_1 ○> '6
}
'6   evaluating stmt: *y = -150 (R-Assign)
'6   evaluating expr: -150 (R-Int)
'6   evaluated expr -150 ⇓ -150
store after drop([203]): {
    l_1 → <203> '0
    l_x → <l_1 ●> '4
    l_y → <l_1 ○> '6
}
store after write(*y, -150): {
    l_1 → <-150> '0
    l_x → <l_1 ●> '4
    l_y → <l_1 ○> '6
}
'6   evaluating expr: ε (R-Unit)
'6   evaluated expr ε ⇓ ε
'6   exit block '6
store after drop([l_y ●]): {
    l_1 → <-150> '0
    l_x → <l_1 ●> '4
}

'4   evaluated expr {[..]; ε} '6 ⇓ ε
'4   evaluating stmt: let mut x = Box::new(-150) (R-Declare)
'4   evaluating expr: Box::new(-150) (R-Box)
'4   evaluating expr: -150 (R-Int)
'4   evaluated expr -150 ⇓ -150
store after insert(l_1 → <-150> '0): {
    l_1 → <-150> '0
}
'4   evaluated expr Box::new(-150) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_x → <l_1 ●> '4
    l_1 → <-150> '0
}

---- tests::eval_assign_replace stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluating stmt: let mut y = Box::new(15) (R-Declare)
'4   evaluating expr: Box::new(15) (R-Box)
'4   evaluating expr: 15 (R-Int)
'4   evaluated expr 15 ⇓ 15
store after insert(l_2 → <15> '0): {
    l_2 → <15> '0
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluated expr Box::new(15) ⇓ l_2 ●
store after insert(l_y → <l_2 ●> '4): {
    l_2 → <15> '0
    l_y → <l_2 ●> '4
    l_x → <l_1 ●> '4
    l_1 → <14> '0
}
'4   evaluating stmt: x = y (R-Assign)
'4   evaluating expr: y (R-Move)
store after write(y, ⊥): {
    l_2 → <15> '0
    l_y → <⊥> '4
    l_x → <l_1 ●> '4
    l_1 → <14> '0
}
'4   evaluated expr y ⇓ l_2 ●
store after drop([l_1 ●]): {
    l_2 → <15> '0
    l_y → <⊥> '4
    l_x → <l_1 ●> '4
}
store after write(x, l_2 ●): {
    l_2 → <15> '0
    l_y → <⊥> '4
    l_x → <l_2 ●> '4
}
'4   evaluating stmt: y = Box::new(16) (R-Assign)
'4   evaluating expr: Box::new(16) (R-Box)
'4   evaluating expr: 16 (R-Int)
'4   evaluated expr 16 ⇓ 16
store after insert(l_3 → <16> '0): {
    l_2 → <15> '0
    l_y → <⊥> '4
    l_x → <l_2 ●> '4
    l_3 → <16> '0
}
'4   evaluated expr Box::new(16) ⇓ l_3 ●
store after drop([⊥]): {
    l_2 → <15> '0
    l_y → <⊥> '4
    l_x → <l_2 ●> '4
    l_3 → <16> '0
}
store after write(y, l_3 ●): {
    l_2 → <15> '0
    l_y → <l_3 ●> '4
    l_x → <l_2 ●> '4
    l_3 → <16> '0
}

---- tests::eval_box stdout ----
'5   evaluating expr: Box::new(-1) (R-Box)
'5   evaluating expr: -1 (R-Int)
'5   evaluated expr -1 ⇓ -1
store after insert(l_1 → <-1> '0): {
    l_1 → <-1> '0
}
'5   evaluated expr Box::new(-1) ⇓ l_1 ●
store after insert(l_1 → <-1> '0): {
    l_1 → <-1> '0
}

---- tests::eval_box_box stdout ----
'34  evaluating expr: Box::new(Box::new(12)) (R-Box)
'34  evaluating expr: Box::new(12) (R-Box)
'34  evaluating expr: 12 (R-Int)
'34  evaluated expr 12 ⇓ 12
store after insert(l_1 → <12> '0): {
    l_1 → <12> '0
}
'34  evaluated expr Box::new(12) ⇓ l_1 ●
store after insert(l_2 → <l_1 ●> '0): {
    l_2 → <l_1 ●> '0
    l_1 → <12> '0
}
'34  evaluated expr Box::new(Box::new(12)) ⇓ l_2 ●

---- tests::eval_copy stdout ----
store after insert(l_x → <34> '1): {
    l_x → <34> '1
}
'0   evaluating expr: x^ (R-Copy)
'0   evaluated expr x^ ⇓ 34

---- tests::eval_expr_stmt stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_1 → <14> '0
    l_x → <l_1 ●> '4
}
'4   evaluating stmt: *x 
'4   evaluating expr: *x (R-Move)
store after write(*x, ⊥): {
    l_1 → <⊥> '0
    l_x → <l_1 ●> '4
}
'4   evaluated expr *x ⇓ 14

---- tests::eval_let_mut stdout ----
'4   evaluating stmt: let mut x = Box::new(14) (R-Declare)
'4   evaluating expr: Box::new(14) (R-Box)
'4   evaluating expr: 14 (R-Int)
'4   evaluated expr 14 ⇓ 14
store after insert(l_1 → <14> '0): {
    l_1 → <14> '0
}
'4   evaluated expr Box::new(14) ⇓ l_1 ●
store after insert(l_x → <l_1 ●> '4): {
    l_x → <l_1 ●> '4
    l_1 → <14> '0
}

---- tests::eval_lits stdout ----
'0   evaluating expr: ε (R-Unit)
'0   evaluated expr ε ⇓ ε
'0   evaluating expr: 234 (R-Int)
'0   evaluated expr 234 ⇓ 234

---- tests::eval_move stdout ----
store after insert(l_x → <5> '1): {
    l_x → <5> '1
}
store after insert(l_x → <⊥> '1): {
    l_x → <⊥> '1
}
'0   evaluating expr: x (R-Move)
store after write(x, ⊥): {
    l_x → <⊥> '1
}
'0   evaluated expr x ⇓ 5

---- tests::locate_var stdout ----
store after insert(l_x → <ε> '0): {
    l_x → <ε> '0
}

---- tests::locate_ref stdout ----
store after insert(l_1 → <ε> '0): {
    l_1 → <ε> '0
}
store after insert(l_y → <l_1 ●> '0): {
    l_y → <l_1 ●> '0
    l_1 → <ε> '0
}
store after insert(l_x → <l_y ○> '0): {
    l_x → <l_y ○> '0
    l_y → <l_1 ●> '0
    l_1 → <ε> '0
}

---- tests::locate_panic stdout ----
store after insert(l_x → <1> '0): {
    l_x → <1> '0
}
thread 'tests::locate_panic' panicked at src/eval.rs:105:18:
tried to deref a non-ref
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace

---- tests::read_ref_owned stdout ----
store after insert(l_1 → <-30> '0): {
    l_1 → <-30> '0
}
store after insert(l_y → <l_1 ●> '0): {
    l_y → <l_1 ●> '0
    l_1 → <-30> '0
}
store after insert(l_x → <l_y ○> '0): {
    l_x → <l_y ○> '0
    l_y → <l_1 ●> '0
    l_1 → <-30> '0
}

---- tests::read_panic stdout ----
store after insert(l_1 → <-30> '0): {
    l_1 → <-30> '0
}
store after insert(l_y → <l_1 ●> '0): {
    l_y → <l_1 ●> '0
    l_1 → <-30> '0
}
store after insert(l_x → <l_y ○> '0): {
    l_y → <l_1 ●> '0
    l_1 → <-30> '0
    l_x → <l_y ○> '0
}
thread 'tests::read_panic' panicked at src/eval.rs:105:18:
tried to deref a non-ref

---- tests::read_var stdout ----
store after insert(l_x → <42> '0): {
    l_x → <42> '0
}

---- tests::write_deref_read_diff stdout ----
store after insert(l_2 → <1> '0): {
    l_2 → <1> '0
}
store after insert(l_x → <l_2 ○> '0): {
    l_x → <l_2 ○> '0
    l_2 → <1> '0
}
store after insert(l_y → <l_x ○> '0): {
    l_x → <l_2 ○> '0
    l_y → <l_x ○> '0
    l_2 → <1> '0
}
store after insert(l_z → <l_2 ○> '0): {
    l_z → <l_2 ○> '0
    l_x → <l_2 ○> '0
    l_2 → <1> '0
    l_y → <l_x ○> '0
}
store after write(**y, 5): {
    l_z → <l_2 ○> '0
    l_x → <l_2 ○> '0
    l_2 → <5> '0
    l_y → <l_x ○> '0
}

---- tests::write_panic stdout ----
store after insert(l_2 → <1> '0): {
    l_2 → <1> '0
}
store after insert(l_x → <l_2 ○> '0): {
    l_2 → <1> '0
    l_x → <l_2 ○> '0
}
store after insert(l_y → <l_x ○> '0): {
    l_y → <l_x ○> '0
    l_2 → <1> '0
    l_x → <l_2 ○> '0
}
store after insert(l_z → <l_2 ○> '0): {
    l_x → <l_2 ○> '0
    l_y → <l_x ○> '0
    l_2 → <1> '0
    l_z → <l_2 ○> '0
}
thread 'tests::write_panic' panicked at src/eval.rs:105:18:
tried to deref a non-ref

---- tests::write_two_deref stdout ----
store after insert(l_2 → <1> '0): {
    l_2 → <1> '0
}
store after insert(l_x → <l_2 ○> '0): {
    l_2 → <1> '0
    l_x → <l_2 ○> '0
}
store after insert(l_y → <l_x ○> '0): {
    l_y → <l_x ○> '0
    l_2 → <1> '0
    l_x → <l_2 ○> '0
}
store after insert(l_z → <l_2 ○> '0): {
    l_2 → <1> '0
    l_z → <l_2 ○> '0
    l_y → <l_x ○> '0
    l_x → <l_2 ○> '0
}
store after write(**y, 5): {
    l_2 → <5> '0
    l_z → <l_2 ○> '0
    l_y → <l_x ○> '0
    l_x → <l_2 ○> '0
}


successes:
    tests::drop_larger_example
    tests::drop_owned
    tests::drop_unowned
    tests::eval_assign_copy
    tests::eval_assign_move
    tests::eval_assign_move_deref
    tests::eval_assign_replace
    tests::eval_block
    tests::eval_block_mut_ref
    tests::eval_block_ref
    tests::eval_box
    tests::eval_box_box
    tests::eval_copy
    tests::eval_expr_stmt
    tests::eval_let_mut
    tests::eval_lits
    tests::eval_move
    tests::locate_panic
    tests::locate_ref
    tests::locate_var
    tests::read_panic
    tests::read_ref_owned
    tests::read_var
    tests::write_deref_read_diff
    tests::write_panic
    tests::write_two_deref

test result: ok. 26 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 18 tests
test tests::basic_read_prohibited ... ok
test tests::compatible_basic ... ok
test tests::basic_write_prohibited_2 ... ok
test tests::compatible_basic_fail ... ok
test tests::env_contained_undefined ... ok
test tests::env_contained ... ok
test tests::basic_write_prohibited ... ok
test tests::env_lval_box ... ok
test tests::compatible_refs ... ok
test tests::env_var ... ok
test tests::env_lval_ref ... ok
test tests::move_under_box ... ok
test tests::move_under_ref ... ok
test tests::drop_basic ... ok
test tests::mut_fail ... ok
test tests::write_basic ... ok
test tests::mut_succ ... ok
test tests::write_ref ... ok

successes:

---- tests::basic_read_prohibited stdout ----
context after insert(z → <□&mut w> '2): {
    z → <□&mut w> '2
}
context after insert(x → <□&mut ***y> '30): {
    z → <□&mut w> '2
    x → <□&mut ***y> '30
}

---- tests::basic_write_prohibited_2 stdout ----
context after insert(z → <□&mut w> '2): {
    z → <□&mut w> '2
}
context after insert(x → <□&***y> '30): {
    z → <□&mut w> '2
    x → <□&***y> '30
}

---- tests::env_contained_undefined stdout ----
context after insert(y → <□□⌊int⌋> '1): {
    y → <□□⌊int⌋> '1
}

---- tests::env_contained stdout ----
context after insert(y → <□□int> '1): {
    y → <□□int> '1
}

---- tests::basic_write_prohibited stdout ----
context after insert(z → <□&mut w> '2): {
    z → <□&mut w> '2
}
context after insert(x → <□&mut ***y> '30): {
    x → <□&mut ***y> '30
    z → <□&mut w> '2
}

---- tests::env_lval_box stdout ----
context after insert(x → <□int> '3): {
    x → <□int> '3
}

---- tests::compatible_refs stdout ----
context after insert(y → <□⌊&a⌋> '1): {
    y → <□⌊&a⌋> '1
}
context after insert(z → <□&*b> '1): {
    y → <□⌊&a⌋> '1
    z → <□&*b> '1
}
context after insert(b → <□&*c> '1): {
    y → <□⌊&a⌋> '1
    z → <□&*b> '1
    b → <□&*c> '1
}
context after insert(a → <int> '1): {
    z → <□&*b> '1
    a → <int> '1
    b → <□&*c> '1
    y → <□⌊&a⌋> '1
}
context after insert(c → <□⌊int⌋> '1): {
    z → <□&*b> '1
    a → <int> '1
    b → <□&*c> '1
    c → <□⌊int⌋> '1
    y → <□⌊&a⌋> '1
}

---- tests::env_var stdout ----
context after insert(x → <ε> '1): {
    x → <ε> '1
}
context after insert(y → <int> '1): {
    y → <int> '1
    x → <ε> '1
}

---- tests::env_lval_ref stdout ----
context after insert(x → <&*y> '3): {
    x → <&*y> '3
}
context after insert(y → <□int> '1): {
    y → <□int> '1
    x → <&*y> '3
}

---- tests::move_under_box stdout ----
context after insert(x → <□□□int> '40): {
    x → <□□□int> '40
}
context after move(**x): {
    x → <□□⌊□int⌋> '40
}

---- tests::move_under_ref stdout ----
context after insert(x → <□&mut *y> '40): {
    x → <□&mut *y> '40
}

---- tests::drop_basic stdout ----
context after insert(x → <□□&mut **y> '11): {
    x → <□□&mut **y> '11
}
context after insert(y → <□&mut *z> '11): {
    x → <□□&mut **y> '11
    y → <□&mut *z> '11
}
context after insert(z → <&mut **w> '1): {
    x → <□□&mut **y> '11
    y → <□&mut *z> '11
    z → <&mut **w> '1
}
context after insert(w → <□□□&a> '87): {
    w → <□□□&a> '87
    x → <□□&mut **y> '11
    y → <□&mut *z> '11
    z → <&mut **w> '1
}
context after insert(a → <int> '11): {
    w → <□□□&a> '87
    x → <□□&mut **y> '11
    y → <□&mut *z> '11
    z → <&mut **w> '1
    a → <int> '11
}
context after insert(b → <int> '44): {
    w → <□□□&a> '87
    b → <int> '44
    x → <□□&mut **y> '11
    y → <□&mut *z> '11
    z → <&mut **w> '1
    a → <int> '11
}
context after drop('11): {
    w → <□□□&a> '87
    b → <int> '44
    z → <&mut **w> '1
}
context after insert(z → <&mut **w> '1): {
    z → <&mut **w> '1
}
context after insert(w → <□□□&a> '87): {
    z → <&mut **w> '1
    w → <□□□&a> '87
}
context after insert(b → <int> '44): {
    z → <&mut **w> '1
    w → <□□□&a> '87
    b → <int> '44
}

---- tests::mut_fail stdout ----
context after insert(x → <□&mut ***y> '31): {
    x → <□&mut ***y> '31
}
context after insert(y → <&mut z> '24): {
    y → <&mut z> '24
    x → <□&mut ***y> '31
}
context after insert(z → <□&**w> '23): {
    y → <&mut z> '24
    z → <□&**w> '23
    x → <□&mut ***y> '31
}
context after insert(w → <□□□int> '29): {
    y → <&mut z> '24
    z → <□&**w> '23
    w → <□□□int> '29
    x → <□&mut ***y> '31
}

---- tests::write_basic stdout ----
context after insert(x → <□□⌊□int⌋> '23): {
    x → <□□⌊□int⌋> '23
}
context after write(**x, □int): {
    x → <□□□int> '23
}

---- tests::mut_succ stdout ----
context after insert(x → <□&mut ***y> '31): {
    x → <□&mut ***y> '31
}
context after insert(y → <&mut z> '24): {
    x → <□&mut ***y> '31
    y → <&mut z> '24
}
context after insert(z → <□&mut **w> '23): {
    z → <□&mut **w> '23
    x → <□&mut ***y> '31
    y → <&mut z> '24
}
context after insert(w → <□□□int> '29): {
    z → <□&mut **w> '23
    w → <□□□int> '29
    y → <&mut z> '24
    x → <□&mut ***y> '31
}

---- tests::write_ref stdout ----
context after insert(x → <□□&mut **y> '23): {
    x → <□□&mut **y> '23
}
context after insert(y → <□&mut *z> '11): {
    x → <□□&mut **y> '23
    y → <□&mut *z> '11
}
context after insert(z → <&mut **w> '1): {
    x → <□□&mut **y> '23
    y → <□&mut *z> '11
    z → <&mut **w> '1
}
context after insert(w → <□□□&a> '87): {
    y → <□&mut *z> '11
    x → <□□&mut **y> '23
    z → <&mut **w> '1
    w → <□□□&a> '87
}
context after insert(a → <int> '23): {
    y → <□&mut *z> '11
    a → <int> '23
    x → <□□&mut **y> '23
    z → <&mut **w> '1
    w → <□□□&a> '87
}
context after insert(b → <int> '44): {
    y → <□&mut *z> '11
    a → <int> '23
    x → <□□&mut **y> '23
    b → <int> '44
    z → <&mut **w> '1
    w → <□□□&a> '87
}
context after write(***x, □&b): {
    y → <□&mut *z> '11
    a → <int> '23
    x → <□□&mut **y> '23
    b → <int> '44
    z → <&mut **w> '1
    w → <□□□&b> '87
}
context after insert(w → <□□□&b> '87): {
    y → <□&mut *z> '11
    a → <int> '23
    x → <□□&mut **y> '23
    b → <int> '44
    z → <&mut **w> '1
    w → <□□□&b> '87
}


successes:
    tests::basic_read_prohibited
    tests::basic_write_prohibited
    tests::basic_write_prohibited_2
    tests::compatible_basic
    tests::compatible_basic_fail
    tests::compatible_refs
    tests::drop_basic
    tests::env_contained
    tests::env_contained_undefined
    tests::env_lval_box
    tests::env_lval_ref
    tests::env_var
    tests::move_under_box
    tests::move_under_ref
    tests::mut_fail
    tests::mut_succ
    tests::write_basic
    tests::write_ref

test result: ok. 18 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 32 tests
test type_tests::assign_err_unknown ... ok
test type_tests::assign_err_borrow ... ok
test type_tests::assign_err_update_imm ... ok
test type_tests::assign_err_moved_out ... ok
test type_tests::assign_err_incompat ... ok
test type_tests::assign_move_in ... ok
test type_tests::assign_ok ... ok
test type_tests::block_err_lifetime ... ok
test type_tests::assign_ok_ref ... ok
test type_tests::block_ok ... ok
test type_tests::cannot_copy ... ok
test type_tests::cannot_move ... ok
test type_tests::copied ... ok
test type_tests::declare_moved_out ... ok
test type_tests::declare_ok ... ok
test type_tests::declare_shadow ... ok
test type_tests::imm_borrow_err ... ok
test type_tests::imm_borrow_err_moved_out ... ok
test type_tests::imm_borrow_ok ... ok
test type_tests::invalid_lval ... ok
test type_tests::keep_move ... ok
test type_tests::make_copy ... ok
test type_tests::move_behind_ref ... ok
test type_tests::moved_out ... ok
test type_tests::mut_borrow_err_already_borrowed ... ok
test type_tests::mut_borrow_err_moved_out ... ok
test type_tests::mut_borrow_err_through_imm_ref ... ok
test type_tests::mut_borrow_ok ... ok
test type_tests::mut_borrow_through_ref ... ok
test type_tests::still_moved_out ... ok
test type_tests::type_box ... ok
test type_tests::type_value ... ok

successes:

---- type_tests::assign_err_unknown stdout ----
'0   typing stmt: *x = 30 (T-Assign)

---- type_tests::assign_err_borrow stdout ----
context after insert(a → <□int> '0): {
    a → <□int> '0
}
context after insert(b → <&*a> '0): {
    a → <□int> '0
    b → <&*a> '0
}
'0   typing stmt: *a = 30 (T-Assign)
'0   typed lval *a : int
'0   typing expr: 30 (T-Int)
'0   typed expr 30 : int
context after write(*a, int): {
    a → <□int> '0
    b → <&*a> '0
}

---- type_tests::assign_err_update_imm stdout ----
context after insert(x → <□int> '0): {
    x → <□int> '0
}
context after insert(y → <&*x> '0): {
    y → <&*x> '0
    x → <□int> '0
}
context after insert(z → <&mut y> '0): {
    z → <&mut y> '0
    y → <&*x> '0
    x → <□int> '0
}
'0   typing stmt: **z = 30 (T-Assign)
'0   typed lval **z : int
'0   typing expr: 30 (T-Int)
'0   typed expr 30 : int
context after write(**z, int): {
    x → <□int> '0
}

---- type_tests::assign_err_moved_out stdout ----
context after insert(x → <□⌊int⌋> '0): {
    x → <□⌊int⌋> '0
}
context after insert(y → <int> '0): {
    y → <int> '0
    x → <□⌊int⌋> '0
}
'0   typing stmt: y = *x (T-Assign)
'0   typed lval y : int
'0   typing expr: *x 
---- type_tests::assign_err_incompat stdout ----
context after insert(a → <□int> '0): {
    a → <□int> '0
}
context after insert(b → <int> '0): {
    b → <int> '0
    a → <□int> '0
}
'0   typing stmt: *a = &b (T-Assign)
'0   typed lval *a : int
'0   typing expr: &b (T-ImmBorrow)
'0   typed expr &b : &b

---- type_tests::assign_move_in stdout ----
context after insert(x → <□⌊int⌋> '0): {
    x → <□⌊int⌋> '0
}
'0   typing stmt: *x = 30 (T-Assign)
'0   typed lval *x : ⌊int⌋
'0   typing expr: 30 (T-Int)
'0   typed expr 30 : int
context after write(*x, int): {
    x → <□int> '0
}
context after insert(x → <□int> '0): {
    x → <□int> '0
}

---- type_tests::assign_ok stdout ----
context after insert(x → <□int> '0): {
    x → <□int> '0
}
'0   typing stmt: x = Box::new(40) (T-Assign)
'0   typed lval x : □int
'0   typing expr: Box::new(40) (T-Box)
'0   typing expr: 40 (T-Int)
'0   typed expr 40 : int
'0   typed expr Box::new(40) : □int
context after write(x, □int): {
    x → <□int> '0
}
'0   typing stmt: *x = 30 (T-Assign)
'0   typed lval *x : int
'0   typing expr: 30 (T-Int)
'0   typed expr 30 : int
context after write(*x, int): {
    x → <□int> '0
}

---- type_tests::block_err_lifetime stdout ----
context after insert(x → <int> '0): {
    x → <int> '0
}
context after insert(y → <&x> '0): {
    x → <int> '0
    y → <&x> '0
}
'0   typing expr: {[..]; ε} '1 (T-Block)
'0   enter block '1

'1   typing stmt: let mut z = 30 (T-Declare)
'1   typing expr: 30 (T-Int)
'1   typed expr 30 : int
context after insert(z → <int> '1): {
    x → <int> '0
    y → <&x> '0
    z → <int> '1
}
'1   typing stmt: y = &z (T-Assign)
'1   typed lval y : &x
'1   typing expr: &z (T-ImmBorrow)
'1   typed expr &z : &z

---- type_tests::assign_ok_ref stdout ----
context after insert(a → <□int> '0): {
    a → <□int> '0
}
context after insert(b → <int> '0): {
    a → <□int> '0
    b → <int> '0
}
context after insert(x → <□&*a> '0): {
    a → <□int> '0
    x → <□&*a> '0
    b → <int> '0
}
context after insert(y → <&mut *x> '0): {
    a → <□int> '0
    x → <□&*a> '0
    b → <int> '0
    y → <&mut *x> '0
}
'0   typing stmt: *y = &b (T-Assign)
'0   typed lval *y : &*a
'0   typing expr: &b (T-ImmBorrow)
'0   typed expr &b : &b
context after write(*y, &b): {
    a → <□int> '0
    x → <□&b> '0
    b → <int> '0
    y → <&mut *x> '0
}
context after insert(x → <□&b> '0): {
    a → <□int> '0
    x → <□&b> '0
    b → <int> '0
    y → <&mut *x> '0
}

---- type_tests::block_ok stdout ----
context after insert(x → <□□int> '0): {
    x → <□□int> '0
}
'0   typing expr: {[..]; ε} '1 (T-Block)
'0   enter block '1

'1   typing stmt: let mut y = 30 (T-Declare)
'1   typing expr: 30 (T-Int)
'1   typed expr 30 : int
context after insert(y → <int> '1): {
    x → <□□int> '0
    y → <int> '1
}
'1   typing stmt: *x 
'1   typing expr: *x (T-Move)
context after move(*x): {
    x → <□⌊□int⌋> '0
    y → <int> '1
}
'1   typed expr *x : □int
'1   typing expr: ε (T-Unit)
'1   typed expr ε : ε
'1   exit block '1
context after drop('1): {
    x → <□⌊□int⌋> '0
}

'0   typed expr {[..]; ε} '1 : ε
context after insert(x → <□⌊□int⌋> '0): {
    x → <□⌊□int⌋> '0
}

---- type_tests::cannot_copy stdout ----
context after insert(x → <int> '1): {
    x → <int> '1
}
context after insert(y → <&mut x> '1): {
    y → <&mut x> '1
    x → <int> '1
}
'0   typing expr: x (T-Copy)

---- type_tests::cannot_move stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&x> '1): {
    x → <□int> '1
    y → <&x> '1
}
'0   typing expr: x (T-Move)

---- type_tests::copied stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
'0   typing expr: *x^ (T-Copy)
'0   typed expr *x^ : int
'0   typing expr: *x^ (T-Copy)
'0   typed expr *x^ : int

---- type_tests::declare_moved_out stdout ----
context after insert(x → <□⌊int⌋> '0): {
    x → <□⌊int⌋> '0
}
'0   typing stmt: let mut y = *x (T-Declare)
'0   typing expr: *x 
---- type_tests::declare_ok stdout ----
context after insert(x → <□int> '0): {
    x → <□int> '0
}
'0   typing stmt: let mut y = &mut *x (T-Declare)
'0   typing expr: &mut *x (T-MutBorrow)
'0   typed expr &mut *x : &mut *x
context after insert(y → <&mut *x> '0): {
    x → <□int> '0
    y → <&mut *x> '0
}
context after insert(y → <&mut *x> '0): {
    x → <□int> '0
    y → <&mut *x> '0
}

---- type_tests::declare_shadow stdout ----
context after insert(x → <□int> '0): {
    x → <□int> '0
}
'0   typing stmt: let mut x = 30 (T-Declare)

---- type_tests::imm_borrow_err stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&mut *x> '1): {
    x → <□int> '1
    y → <&mut *x> '1
}
'0   typing expr: &x (T-ImmBorrow)

---- type_tests::imm_borrow_err_moved_out stdout ----
context after insert(x → <□⌊int⌋> '1): {
    x → <□⌊int⌋> '1
}
'0   typing expr: &*x (T-ImmBorrow)

---- type_tests::imm_borrow_ok stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&x> '1): {
    y → <&x> '1
    x → <□int> '1
}
'0   typing expr: &*x (T-ImmBorrow)
'0   typed expr &*x : &*x

---- type_tests::invalid_lval stdout ----
context after insert(x → <int> '1): {
    x → <int> '1
}
'0   typing expr: *x^ 
---- type_tests::keep_move stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
'0   typing expr: x (T-Move)
context after move(x): {
    x → <⌊□int⌋> '1
}
'0   typed expr x : □int

---- type_tests::make_copy stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
'0   typing expr: *x (T-Copy)
'0   typed expr *x^ : int

---- type_tests::move_behind_ref stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&x> '1): {
    y → <&x> '1
    x → <□int> '1
}
'0   typing expr: *y (T-Move)

---- type_tests::moved_out stdout ----
context after insert(x → <□□int> '1): {
    x → <□□int> '1
}
'0   typing expr: *x (T-Move)
context after move(*x): {
    x → <□⌊□int⌋> '1
}
'0   typed expr *x : □int
'0   typing expr: **x 
---- type_tests::mut_borrow_err_already_borrowed stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&*x> '1): {
    x → <□int> '1
    y → <&*x> '1
}
'0   typing expr: &mut x (T-MutBorrow)

---- type_tests::mut_borrow_err_moved_out stdout ----
context after insert(x → <□⌊int⌋> '1): {
    x → <□⌊int⌋> '1
}
'0   typing expr: &mut *x (T-MutBorrow)

---- type_tests::mut_borrow_err_through_imm_ref stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&*x> '1): {
    x → <□int> '1
    y → <&*x> '1
}
context after insert(z → <&mut y> '1): {
    z → <&mut y> '1
    x → <□int> '1
    y → <&*x> '1
}
'0   typing expr: &mut **z (T-MutBorrow)

---- type_tests::mut_borrow_ok stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
'0   typing expr: &mut *x (T-MutBorrow)
'0   typed expr &mut *x : &mut *x

---- type_tests::mut_borrow_through_ref stdout ----
context after insert(x → <□int> '1): {
    x → <□int> '1
}
context after insert(y → <&mut *x> '1): {
    y → <&mut *x> '1
    x → <□int> '1
}
context after insert(z → <&mut y> '1): {
    y → <&mut *x> '1
    z → <&mut y> '1
    x → <□int> '1
}
'0   typing expr: &mut **z (T-MutBorrow)
'0   typed expr &mut **z : &mut **z

---- type_tests::still_moved_out stdout ----
context after insert(x → <□□int> '1): {
    x → <□□int> '1
}
{
    x → <□□int> '1
}
'0   typing expr: *x (T-Move)
context after move(*x): {
    x → <□⌊□int⌋> '1
}
'0   typed expr *x : □int
'0   typing expr: x 
---- type_tests::type_box stdout ----
'0   typing expr: Box::new(30) (T-Box)
'0   typing expr: 30 (T-Int)
'0   typed expr 30 : int
'0   typed expr Box::new(30) : □int

---- type_tests::type_value stdout ----
'0   typing expr: ε (T-Unit)
'0   typed expr ε : ε
'0   typing expr: 42 (T-Int)
'0   typed expr 42 : int


successes:
    type_tests::assign_err_borrow
    type_tests::assign_err_incompat
    type_tests::assign_err_moved_out
    type_tests::assign_err_unknown
    type_tests::assign_err_update_imm
    type_tests::assign_move_in
    type_tests::assign_ok
    type_tests::assign_ok_ref
    type_tests::block_err_lifetime
    type_tests::block_ok
    type_tests::cannot_copy
    type_tests::cannot_move
    type_tests::copied
    type_tests::declare_moved_out
    type_tests::declare_ok
    type_tests::declare_shadow
    type_tests::imm_borrow_err
    type_tests::imm_borrow_err_moved_out
    type_tests::imm_borrow_ok
    type_tests::invalid_lval
    type_tests::keep_move
    type_tests::make_copy
    type_tests::move_behind_ref
    type_tests::moved_out
    type_tests::mut_borrow_err_already_borrowed
    type_tests::mut_borrow_err_moved_out
    type_tests::mut_borrow_err_through_imm_ref
    type_tests::mut_borrow_ok
    type_tests::mut_borrow_through_ref
    type_tests::still_moved_out
    type_tests::type_box
    type_tests::type_value

test result: ok. 32 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s


running 0 tests

successes:

successes:

test result: ok. 0 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out; finished in 0.00s

